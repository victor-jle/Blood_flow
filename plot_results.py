"""
This python module contains functions for 3D plotting of data related to blood flow, velocity, pressure in arteries.
Before running this code, please ensure that you have runned the simulation and have the necessary data files in the associated directories.
The only required parameters for this module is the number of vessels of the simulation.

For bifurcation, plot results at inlet of daughter vessels + outlet of main vessel
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import cm
import seaborn as sns
import os
from math import ceil

def get_data(number_vessels):
    """
    Function to get the data from the csv files generated by the simulation.
    
    Parameters:
    - number_vessels: int, number of vessels in the simulation (1 or 3 ,i.e., one vessel or bifurcation)
    
    Returns:
    - t: time points
    - x: spatial points
    - A: area data
    - Q: flow rate data
    """
    if number_vessels == 1:
        path = "data/one_vessel/"
    else:
        path = "data/bifurcation/"

    if not os.path.exists(path):
        raise NotADirectoryError("No data folder to import, please run the simulation first")
    
    # Get all the filename that are in the directory
    files = os.listdir(path)
    if not files:
        raise FileNotFoundError("No data files found in the specified directory. Please ensure the simulation has been run and data files are present.")
    
    arrays = {}

    for filename in os.listdir(path):
        if filename.endswith(".csv"):
            var_name = os.path.splitext(filename)[0]  # get the variable name from the filename without extention
            full_path = os.path.join(path, filename)
            if var_name == 'time_data':
                t = np.loadtxt(full_path, delimiter=',')
            else:
                vessel = var_name.split('_')[1]
                first_letter = var_name[0]
                array_data = np.loadtxt(full_path, delimiter=',')

               # Create a new sub-key if not exist
                if vessel not in arrays:
                    arrays[vessel] = {}

                # Add data to the corresponding sub-key
                arrays[vessel][first_letter] = array_data

    return t, arrays, path

def save_plots_3D(t, var_dict, path, show):
    dict_vessel = {'p' : "parent vessel", 'd1' : "first daughter vessel", 'd2' : "second daughter vessel"}
    save_path = path + "plots"
    if not os.path.exists(save_path):
        os.mkdir(save_path)
    for key in var_dict.keys():
        for sub_key in var_dict[key].keys(): 
            if sub_key == 'x':
                pass
            else:
                if sub_key == 'A':
                    title = "Evolution of cross-sectional area"
                    z_axis = "Cross sectionnal area (cm²)"
                elif sub_key == 'Q':
                    title = "Evolution of blood flow rate"
                    z_axis = "Blood flow (cm^3/s)"
                elif sub_key == 'P':
                    title = "Evolution of blood pressure"
                    z_axis = "Blood Pressure (mmHg)"
                elif sub_key == 'U':
                    title = "Evolution of blood velocity"
                    z_axis = "Blood velocity (m/s)"

                fig = plt.figure(title + " for the " + key)
                ax = fig.add_subplot(111, projection='3d')
                x = var_dict[key]['x']
                time_plot = t
                var_plot = var_dict[key][sub_key]
                
                while sum(abs(var_plot[-1,:])) == 0:
                    var_plot = var_plot[:-1,:]
                    time_plot = time_plot[:-1]
                
                if sub_key == 'P':
                    while abs(np.min(var_plot)) > np.max(var_plot) or np.isinf(var_plot[-1,:]).any():
                        var_plot = var_plot[:-1,:]
                        time_plot = time_plot[:-1]
                
                X, Y = np.meshgrid(time_plot, x)
                surf = ax.plot_surface(X, Y, var_plot.T, rstride=1, cstride=1, cmap=cm.viridis,
                                    linewidth=0, antialiased=False)
                ax.set_xlabel('t (s)')
                ax.set_ylabel('z (cm)')
                ax.set_zlabel(z_axis)
                ax.set_xlim([time_plot.min(), time_plot.max()])
                ax.set_ylim([min(x), max(x)])
                fig.colorbar(surf, shrink=0.5, aspect=5)
                if show == 1:
                    plt.show()
                else:
                    pass
                filename = "%s/%s_%s_3d.png" % (save_path, sub_key, key)
                fig.savefig(filename, dpi=600, bbox_inches='tight')
    print("The 3D figures have been saved in the directory : ", save_path)
    plt.close()
                
def save_plots_1D(t, var_dict, path, show):
    dict_vessel = {'p' : "parent vessel", 'd1' : "first daughter vessel", 'd2' : "second daughter vessel"}
    save_path = path + "plots"
    if not os.path.exists(save_path):
        os.mkdir(save_path)
    for key in var_dict.keys():
        for sub_key in var_dict[key].keys(): 
            if sub_key == 'x':
                pass
            else:
                if sub_key == 'A':
                    title = "Cross-sectional area profile"
                    y_axis = "Cross sectionnal area (cm²)"
                elif sub_key == 'Q':
                    title = "Flow rate profile"
                    y_axis = "Blood flow (cm^3/s)"
                elif sub_key == 'P':
                    title = "Blood pressure profile"
                    y_axis = "Blood Pressure (mmHg)"
                elif sub_key == 'U':
                    title = "Blood velocity profile"
                    y_axis = "Blood velocity (cm/s)"

                x = var_dict[key]['x']
                time_plot = t
                var_plot = var_dict[key][sub_key]
                
                while sum(abs(var_plot[-1,:])) == 0:
                    var_plot = var_plot[:-1,:]
                    time_plot = time_plot[:-1]

                if sub_key == 'P':
                    while abs(np.min(var_plot)) > np.max(var_plot) or np.isinf(var_plot[-1,:]).any():
                        var_plot = var_plot[:-1,:]
                        time_plot = time_plot[:-1]
                        
                i1 = 0
                i2 = int((len(x)-1)/2)
                i3 = len(x)-1

                space_indices = [i1, i2, i3]  # Adapt as needed

                # === Prepare DataFrame ===
                records = []
                for k in space_indices:
                    for i, xi in enumerate(time_plot):
                        records.append({
                            "t": xi,
                            "velocity": var_plot[i, k],
                            "location": f"{x[k]:.2f} cm"
                        })

                df = pd.DataFrame.from_records(records)

                # === Plot ===
                sns.set_theme(style="whitegrid")
                fig = plt.figure(title + " for vessel " + key,figsize=(10, 5))

                sns.lineplot(
                    data=df,
                    x="t",
                    y="velocity",
                    hue="location",
                    style="location",          # Different dashes per time (optional)
                    dashes=[(4, 2)] * len(space_indices),  # All dashed lines
                    estimator=None,
                    lw=2,
                    palette="tab10"
                )

                # === Style ===
                #plt.title("Velocity profiles")
                plt.xlabel("Time (s)")
                plt.ylabel(y_axis)
                plt.legend(title="Location", bbox_to_anchor=(1.05, 1), loc="upper left", borderaxespad=0.)
                plt.tight_layout()
                if show == 1:
                    plt.show()
                else:
                    pass
                filename = "%s/%s_%s_1d.png" % (save_path, sub_key, key)
                fig.savefig(filename, dpi=600, bbox_inches='tight')
    print("The 1D figures have been saved in the directory : ", save_path)
    plt.close()


if __name__ == "__main__":

    number_vessels = 3          # Set the number of vessels | 1 or one vessel, 3 for bifurcation
    show_3D = 1                 # Variable to toogle the plotting for 3D graph , 0 = no, 1 = yes, in both cases, fig will be saved
    show_1D = 0                 # Variable to toogle the plotting for 1D graph , 0 = no, 1 = yes, in both cases, fig will be saved

    #t, var_dict, path = get_data(number_vessels)
    
    path1 = "data/bifurcation/QA_1e5"
    path2 = "data/bifurcation/QA_2e5"
    path3 = "data/bifurcation/QA_4e5"

    t_1 = np.loadtxt(path1 + "/time_data.csv", delimiter=',')
    t_2 = np.loadtxt(path2 + "/time_data.csv", delimiter=',')
    t_3 = np.loadtxt(path3 + "/time_data.csv", delimiter=',')
    
    Q_10 = np.loadtxt(path1 + "/Q_vessel0.csv", delimiter=',')
    Q_11 = np.loadtxt(path1 + "/Q_vessel1.csv", delimiter=',')
    Q_12 = np.loadtxt(path1 + "/Q_vessel2.csv", delimiter=',')

    Q_20 = np.loadtxt(path2 + "/Q_vessel0.csv", delimiter=',')
    Q_21 = np.loadtxt(path2 + "/Q_vessel1.csv", delimiter=',')
    Q_22 = np.loadtxt(path2 + "/Q_vessel2.csv", delimiter=',')

    Q_30 = np.loadtxt(path3 + "/Q_vessel0.csv", delimiter=',')
    Q_31 = np.loadtxt(path3 + "/Q_vessel1.csv", delimiter=',')
    Q_32 = np.loadtxt(path3 + "/Q_vessel2.csv", delimiter=',')

    A_10 = np.loadtxt(path1 + "/A_vessel0.csv", delimiter=',')
    A_11 = np.loadtxt(path1 + "/A_vessel1.csv", delimiter=',')
    A_12 = np.loadtxt(path1 + "/A_vessel2.csv", delimiter=',')

    A_20 = np.loadtxt(path2 + "/A_vessel0.csv", delimiter=',')
    A_21 = np.loadtxt(path2 + "/A_vessel1.csv", delimiter=',')
    A_22 = np.loadtxt(path2 + "/A_vessel2.csv", delimiter=',')

    A_30 = np.loadtxt(path3 + "/A_vessel0.csv", delimiter=',')
    A_31 = np.loadtxt(path3 + "/A_vessel1.csv", delimiter=',')
    A_32 = np.loadtxt(path3 + "/A_vessel2.csv", delimiter=',')

    lenx1 = len(A_10[0,:])
    lenx2 = len(A_20[0,:])
    lenx3 = len(A_30[0,:])

    ind_1 = int(ceil(lenx1/2))
    ind_2 = int(ceil(lenx2/2))
    ind_3 = int(ceil(lenx3/2))
    
    U_10 = (Q_10 / A_10)[:,ind_1]
    U_11 = (Q_11 / A_11)[:,ind_1]
    U_12 = (Q_12 / A_12)[:,ind_1]

    U_20 = (Q_20 / A_20)[:,ind_2]
    U_21 = (Q_21 / A_21)[:,ind_2]
    U_22 = (Q_22 / A_22)[:,ind_2]

    U_30 = (Q_30 / A_30)[:,ind_3]
    U_31 = (Q_31 / A_31)[:,ind_3]
    U_32 = (Q_32 / A_32)[:,ind_3]

    plt.figure("CCA")
    plt.plot(t_1, U_10, 'k-', label='Δt = 1e-5, Δz = 0.1')
    plt.plot(t_2, U_20, 'ro', label='Δt = 2e-5, Δz = 0.2')
    plt.plot(t_3, U_30, 'b*', label='Δt = 4e-5, Δz = 0.4')
    plt.xlabel("Time (s)")
    plt.ylabel("Blood velocity (m/s)")
    plt.legend()

    plt.figure("ICA")
    plt.plot(t_1, U_11, 'k-', label='Δt = 1e-5, Δz = 0.1')
    plt.plot(t_2, U_21, 'ro', label='Δt = 2e-5, Δz = 0.2')
    plt.plot(t_3, U_31, 'b*', label='Δt = 4e-5, Δz = 0.4')
    plt.xlabel("Time (s)")
    plt.ylabel("Blood velocity (m/s)")
    plt.legend()

    plt.figure("ECA")
    plt.plot(t_1, U_12, 'k-', label='Δt = 1e-5, Δz = 0.1')
    plt.plot(t_2, U_22, 'ro', label='Δt = 2e-5, Δz = 0.2')
    plt.plot(t_3, U_32, 'b*', label='Δt = 4e-5, Δz = 0.4')
    plt.xlabel("Time (s)")
    plt.ylabel("Blood velocity (m/s)")
    plt.legend()
    plt.show()
    """
    plt.figure()
    plt.plot(t[:-1], var_dict["vessel0"]["P"][:-1,-1], 'k-')
    plt.plot(t[:-1], var_dict["vessel1"]["P"][:-1,0], 'ro')
    plt.plot(t[:-1], var_dict["vessel2"]["P"][:-1,0], 'x')
    plt.xlabel("Time (s)")
    plt.ylabel("Pressure (mmHg)")
    plt.legend(["CCA", "ECA", "ICA"])
    plt.show()

    plt.figure()
    plt.plot(t[:-1], var_dict["vessel0"]["Q"][:-1,-1], 'k-')
    plt.plot(t[:-1], var_dict["vessel1"]["Q"][:-1,0] + var_dict["vessel2"]["Q"][:-1,0], 'ro')
    plt.xlabel("Time (s)")
    plt.ylabel("Flow rate (cm³/s)")
    plt.legend(["CCA", "ECA + ICA"])
    plt.show()
    """
    
    """
    save_plots_3D(t, var_dict, path, show_3D)
    save_plots_1D(t, var_dict, path, show_1D)
    """